/* soapServer.cpp
   Generated by gSOAP 2.8.4 from servicedescription.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.4 2011-11-11 11:41:27 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ps:playerById"))
		return soap_serve_ps__playerById(soap);
	if (!soap_match_tag(soap, soap->tag, "ps:playerList"))
		return soap_serve_ps__playerList(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ps__playerById(struct soap *soap)
{	struct ps__playerById soap_tmp_ps__playerById;
	struct ps__playerByIdResponse soap_tmp_ps__playerByIdResponse;
	soap_default_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse);
	soap_default_ps__playerById(soap, &soap_tmp_ps__playerById);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__playerById(soap, &soap_tmp_ps__playerById, "ps:playerById", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ps__playerById(soap, soap_tmp_ps__playerById.id, soap_tmp_ps__playerByIdResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse, "ps:playerByIdResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse, "ps:playerByIdResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ps__playerList(struct soap *soap)
{	struct ps__playerList soap_tmp_ps__playerList;
	struct ps__playerListResponse soap_tmp_ps__playerListResponse;
	soap_default_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse);
	soap_default_ps__playerList(soap, &soap_tmp_ps__playerList);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__playerList(soap, &soap_tmp_ps__playerList, "ps:playerList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ps__playerList(soap, soap_tmp_ps__playerListResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse, "ps:playerListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse, "ps:playerListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
