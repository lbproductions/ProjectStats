/* soapprojectstatsProxy.cpp
   Generated by gSOAP 2.8.4 from servicedescription.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapprojectstatsProxy.h"

projectstatsProxy::projectstatsProxy()
{	projectstatsProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

projectstatsProxy::projectstatsProxy(const struct soap &_soap) : soap(_soap)
{ }

projectstatsProxy::projectstatsProxy(const char *url)
{	projectstatsProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

projectstatsProxy::projectstatsProxy(soap_mode iomode)
{	projectstatsProxy_init(iomode, iomode);
}

projectstatsProxy::projectstatsProxy(const char *url, soap_mode iomode)
{	projectstatsProxy_init(iomode, iomode);
	soap_endpoint = url;
}

projectstatsProxy::projectstatsProxy(soap_mode imode, soap_mode omode)
{	projectstatsProxy_init(imode, omode);
}

projectstatsProxy::~projectstatsProxy()
{ }

void projectstatsProxy::projectstatsProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ps", "urn:projectstats", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void projectstatsProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void projectstatsProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *projectstatsProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *projectstatsProxy::soap_fault()
{	return this->fault;
}

const char *projectstatsProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *projectstatsProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int projectstatsProxy::soap_close_socket()
{	return soap_closesock(this);
}

int projectstatsProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void projectstatsProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void projectstatsProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *projectstatsProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int projectstatsProxy::playerById(const char *endpoint, const char *soap_action, int id, PlayerInformation &result)
{	struct soap *soap = this;
	struct ps__playerById soap_tmp_ps__playerById;
	struct ps__playerByIdResponse *soap_tmp_ps__playerByIdResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__playerById.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__playerById(soap, &soap_tmp_ps__playerById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__playerById(soap, &soap_tmp_ps__playerById, "ps:playerById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__playerById(soap, &soap_tmp_ps__playerById, "ps:playerById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__playerByIdResponse = soap_get_ps__playerByIdResponse(soap, NULL, "ps:playerByIdResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__playerByIdResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::playerList(const char *endpoint, const char *soap_action, PlayerList &result)
{	struct soap *soap = this;
	struct ps__playerList soap_tmp_ps__playerList;
	struct ps__playerListResponse *soap_tmp_ps__playerListResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__playerList(soap, &soap_tmp_ps__playerList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__playerList(soap, &soap_tmp_ps__playerList, "ps:playerList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__playerList(soap, &soap_tmp_ps__playerList, "ps:playerList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__playerListResponse = soap_get_ps__playerListResponse(soap, NULL, "ps:playerListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__playerListResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::drinkList(const char *endpoint, const char *soap_action, DrinkList &result)
{	struct soap *soap = this;
	struct ps__drinkList soap_tmp_ps__drinkList;
	struct ps__drinkListResponse *soap_tmp_ps__drinkListResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__drinkList(soap, &soap_tmp_ps__drinkList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__drinkList(soap, &soap_tmp_ps__drinkList, "ps:drinkList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__drinkList(soap, &soap_tmp_ps__drinkList, "ps:drinkList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__drinkListResponse = soap_get_ps__drinkListResponse(soap, NULL, "ps:drinkListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__drinkListResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::placeList(const char *endpoint, const char *soap_action, PlaceList &result)
{	struct soap *soap = this;
	struct ps__placeList soap_tmp_ps__placeList;
	struct ps__placeListResponse *soap_tmp_ps__placeListResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__placeList(soap, &soap_tmp_ps__placeList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__placeList(soap, &soap_tmp_ps__placeList, "ps:placeList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__placeList(soap, &soap_tmp_ps__placeList, "ps:placeList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__placeListResponse = soap_get_ps__placeListResponse(soap, NULL, "ps:placeListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__placeListResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::gameList(const char *endpoint, const char *soap_action, GameList &result)
{	struct soap *soap = this;
	struct ps__gameList soap_tmp_ps__gameList;
	struct ps__gameListResponse *soap_tmp_ps__gameListResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__gameList(soap, &soap_tmp_ps__gameList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__gameList(soap, &soap_tmp_ps__gameList, "ps:gameList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__gameList(soap, &soap_tmp_ps__gameList, "ps:gameList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__gameListResponse = soap_get_ps__gameListResponse(soap, NULL, "ps:gameListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__gameListResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::gameById(const char *endpoint, const char *soap_action, int id, GameInformation &result)
{	struct soap *soap = this;
	struct ps__gameById soap_tmp_ps__gameById;
	struct ps__gameByIdResponse *soap_tmp_ps__gameByIdResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__gameById.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__gameById(soap, &soap_tmp_ps__gameById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__gameById(soap, &soap_tmp_ps__gameById, "ps:gameById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__gameById(soap, &soap_tmp_ps__gameById, "ps:gameById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__gameByIdResponse = soap_get_ps__gameByIdResponse(soap, NULL, "ps:gameByIdResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__gameByIdResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::gameCurrentPlayingPlayers(const char *endpoint, const char *soap_action, int gameId, PlayerList &result)
{	struct soap *soap = this;
	struct ps__gameCurrentPlayingPlayers soap_tmp_ps__gameCurrentPlayingPlayers;
	struct ps__gameCurrentPlayingPlayersResponse *soap_tmp_ps__gameCurrentPlayingPlayersResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__gameCurrentPlayingPlayers.gameId = gameId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__gameCurrentPlayingPlayers(soap, &soap_tmp_ps__gameCurrentPlayingPlayers);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__gameCurrentPlayingPlayers(soap, &soap_tmp_ps__gameCurrentPlayingPlayers, "ps:gameCurrentPlayingPlayers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__gameCurrentPlayingPlayers(soap, &soap_tmp_ps__gameCurrentPlayingPlayers, "ps:gameCurrentPlayingPlayers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__gameCurrentPlayingPlayersResponse = soap_get_ps__gameCurrentPlayingPlayersResponse(soap, NULL, "ps:gameCurrentPlayingPlayersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__gameCurrentPlayingPlayersResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::gamePlayersSortedByPlacement(const char *endpoint, const char *soap_action, int gameId, PlayerList &result)
{	struct soap *soap = this;
	struct ps__gamePlayersSortedByPlacement soap_tmp_ps__gamePlayersSortedByPlacement;
	struct ps__gamePlayersSortedByPlacementResponse *soap_tmp_ps__gamePlayersSortedByPlacementResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__gamePlayersSortedByPlacement.gameId = gameId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__gamePlayersSortedByPlacement(soap, &soap_tmp_ps__gamePlayersSortedByPlacement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__gamePlayersSortedByPlacement(soap, &soap_tmp_ps__gamePlayersSortedByPlacement, "ps:gamePlayersSortedByPlacement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__gamePlayersSortedByPlacement(soap, &soap_tmp_ps__gamePlayersSortedByPlacement, "ps:gamePlayersSortedByPlacement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	result.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__gamePlayersSortedByPlacementResponse = soap_get_ps__gamePlayersSortedByPlacementResponse(soap, NULL, "ps:gamePlayersSortedByPlacementResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__gamePlayersSortedByPlacementResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::addSchmeisserei(const char *endpoint, const char *soap_action, int gameId, int playerId, std::string type, std::string &result)
{	struct soap *soap = this;
	struct ps__addSchmeisserei soap_tmp_ps__addSchmeisserei;
	struct ps__addSchmeissereiResponse *soap_tmp_ps__addSchmeissereiResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__addSchmeisserei.gameId = gameId;
	soap_tmp_ps__addSchmeisserei.playerId = playerId;
	soap_tmp_ps__addSchmeisserei.type = type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__addSchmeisserei(soap, &soap_tmp_ps__addSchmeisserei);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__addSchmeisserei(soap, &soap_tmp_ps__addSchmeisserei, "ps:addSchmeisserei", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__addSchmeisserei(soap, &soap_tmp_ps__addSchmeisserei, "ps:addSchmeisserei", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_std__string(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__addSchmeissereiResponse = soap_get_ps__addSchmeissereiResponse(soap, NULL, "ps:addSchmeissereiResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__addSchmeissereiResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::addDrink(const char *endpoint, const char *soap_action, int gameId, int playerId, int drinkId, std::string &result)
{	struct soap *soap = this;
	struct ps__addDrink soap_tmp_ps__addDrink;
	struct ps__addDrinkResponse *soap_tmp_ps__addDrinkResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__addDrink.gameId = gameId;
	soap_tmp_ps__addDrink.playerId = playerId;
	soap_tmp_ps__addDrink.drinkId = drinkId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__addDrink(soap, &soap_tmp_ps__addDrink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__addDrink(soap, &soap_tmp_ps__addDrink, "ps:addDrink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__addDrink(soap, &soap_tmp_ps__addDrink, "ps:addDrink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_std__string(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__addDrinkResponse = soap_get_ps__addDrinkResponse(soap, NULL, "ps:addDrinkResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__addDrinkResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::addRound(const char *endpoint, const char *soap_action, int gameId, int re1PlayerId, int re2PlayerId, int hochzeitPlayerId, int schweinereiPlayerId, int trumpfabgabePlayerId, std::string soloType, bool pflichtsolo, int points, std::string comment, std::string &result)
{	struct soap *soap = this;
	struct ps__addRound soap_tmp_ps__addRound;
	struct ps__addRoundResponse *soap_tmp_ps__addRoundResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__addRound.gameId = gameId;
	soap_tmp_ps__addRound.re1PlayerId = re1PlayerId;
	soap_tmp_ps__addRound.re2PlayerId = re2PlayerId;
	soap_tmp_ps__addRound.hochzeitPlayerId = hochzeitPlayerId;
	soap_tmp_ps__addRound.schweinereiPlayerId = schweinereiPlayerId;
	soap_tmp_ps__addRound.trumpfabgabePlayerId = trumpfabgabePlayerId;
	soap_tmp_ps__addRound.soloType = soloType;
	soap_tmp_ps__addRound.pflichtsolo = pflichtsolo;
	soap_tmp_ps__addRound.points = points;
	soap_tmp_ps__addRound.comment = comment;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__addRound(soap, &soap_tmp_ps__addRound);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__addRound(soap, &soap_tmp_ps__addRound, "ps:addRound", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__addRound(soap, &soap_tmp_ps__addRound, "ps:addRound", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_std__string(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__addRoundResponse = soap_get_ps__addRoundResponse(soap, NULL, "ps:addRoundResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__addRoundResponse->result;
	return soap_closesock(soap);
}

int projectstatsProxy::hasPflichtSolo(const char *endpoint, const char *soap_action, int playerId, int gameId, bool &result)
{	struct soap *soap = this;
	struct ps__hasPflichtSolo soap_tmp_ps__hasPflichtSolo;
	struct ps__hasPflichtSoloResponse *soap_tmp_ps__hasPflichtSoloResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns? http://eineurl.von.uns?";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ps__hasPflichtSolo.playerId = playerId;
	soap_tmp_ps__hasPflichtSolo.gameId = gameId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ps__hasPflichtSolo(soap, &soap_tmp_ps__hasPflichtSolo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__hasPflichtSolo(soap, &soap_tmp_ps__hasPflichtSolo, "ps:hasPflichtSolo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__hasPflichtSolo(soap, &soap_tmp_ps__hasPflichtSolo, "ps:hasPflichtSolo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_bool(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ps__hasPflichtSoloResponse = soap_get_ps__hasPflichtSoloResponse(soap, NULL, "ps:hasPflichtSoloResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ps__hasPflichtSoloResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
