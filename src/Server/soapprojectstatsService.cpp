/* soapprojectstatsService.cpp
   Generated by gSOAP 2.8.4 from servicedescription.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapprojectstatsService.h"

projectstatsService::projectstatsService()
{	projectstatsService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

projectstatsService::projectstatsService(const struct soap &_soap) : soap(_soap)
{ }

projectstatsService::projectstatsService(soap_mode iomode)
{	projectstatsService_init(iomode, iomode);
}

projectstatsService::projectstatsService(soap_mode imode, soap_mode omode)
{	projectstatsService_init(imode, omode);
}

projectstatsService::~projectstatsService()
{ }

void projectstatsService::projectstatsService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ps", "urn:projectstats", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
};

void projectstatsService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

#ifndef WITH_PURE_VIRTUAL
projectstatsService *projectstatsService::copy()
{	projectstatsService *dup = SOAP_NEW_COPY(projectstatsService(*(struct soap*)this));
	return dup;
}
#endif

int projectstatsService::soap_close_socket()
{	return soap_closesock(this);
}

int projectstatsService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int projectstatsService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int projectstatsService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int projectstatsService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int projectstatsService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void projectstatsService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void projectstatsService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *projectstatsService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void projectstatsService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *projectstatsService::soap_header()
{	return this->header;
}

int projectstatsService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->error;
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET projectstatsService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET projectstatsService::accept()
{	return soap_accept(this);
}

int projectstatsService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ps__playerById(projectstatsService*);
static int serve_ps__playerList(projectstatsService*);
static int serve_ps__drinkList(projectstatsService*);
static int serve_ps__placeList(projectstatsService*);
static int serve_ps__gameList(projectstatsService*);
static int serve_ps__gameCurrentPlayingPlayers(projectstatsService*);
static int serve_ps__addSchmeisserei(projectstatsService*);
static int serve_ps__addDrink(projectstatsService*);
static int serve_ps__addRound(projectstatsService*);

int projectstatsService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ps:playerById"))
		return serve_ps__playerById(this);
	if (!soap_match_tag(this, this->tag, "ps:playerList"))
		return serve_ps__playerList(this);
	if (!soap_match_tag(this, this->tag, "ps:drinkList"))
		return serve_ps__drinkList(this);
	if (!soap_match_tag(this, this->tag, "ps:placeList"))
		return serve_ps__placeList(this);
	if (!soap_match_tag(this, this->tag, "ps:gameList"))
		return serve_ps__gameList(this);
	if (!soap_match_tag(this, this->tag, "ps:gameCurrentPlayingPlayers"))
		return serve_ps__gameCurrentPlayingPlayers(this);
	if (!soap_match_tag(this, this->tag, "ps:addSchmeisserei"))
		return serve_ps__addSchmeisserei(this);
	if (!soap_match_tag(this, this->tag, "ps:addDrink"))
		return serve_ps__addDrink(this);
	if (!soap_match_tag(this, this->tag, "ps:addRound"))
		return serve_ps__addRound(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ps__playerById(projectstatsService *soap)
{	struct ps__playerById soap_tmp_ps__playerById;
	struct ps__playerByIdResponse soap_tmp_ps__playerByIdResponse;
	soap_default_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse);
	soap_default_ps__playerById(soap, &soap_tmp_ps__playerById);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__playerById(soap, &soap_tmp_ps__playerById, "ps:playerById", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->playerById(soap_tmp_ps__playerById.id, soap_tmp_ps__playerByIdResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse, "ps:playerByIdResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__playerByIdResponse(soap, &soap_tmp_ps__playerByIdResponse, "ps:playerByIdResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__playerList(projectstatsService *soap)
{	struct ps__playerList soap_tmp_ps__playerList;
	struct ps__playerListResponse soap_tmp_ps__playerListResponse;
	soap_default_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse);
	soap_default_ps__playerList(soap, &soap_tmp_ps__playerList);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__playerList(soap, &soap_tmp_ps__playerList, "ps:playerList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->playerList(soap_tmp_ps__playerListResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse, "ps:playerListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__playerListResponse(soap, &soap_tmp_ps__playerListResponse, "ps:playerListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__drinkList(projectstatsService *soap)
{	struct ps__drinkList soap_tmp_ps__drinkList;
	struct ps__drinkListResponse soap_tmp_ps__drinkListResponse;
	soap_default_ps__drinkListResponse(soap, &soap_tmp_ps__drinkListResponse);
	soap_default_ps__drinkList(soap, &soap_tmp_ps__drinkList);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__drinkList(soap, &soap_tmp_ps__drinkList, "ps:drinkList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->drinkList(soap_tmp_ps__drinkListResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__drinkListResponse(soap, &soap_tmp_ps__drinkListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__drinkListResponse(soap, &soap_tmp_ps__drinkListResponse, "ps:drinkListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__drinkListResponse(soap, &soap_tmp_ps__drinkListResponse, "ps:drinkListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__placeList(projectstatsService *soap)
{	struct ps__placeList soap_tmp_ps__placeList;
	struct ps__placeListResponse soap_tmp_ps__placeListResponse;
	soap_default_ps__placeListResponse(soap, &soap_tmp_ps__placeListResponse);
	soap_default_ps__placeList(soap, &soap_tmp_ps__placeList);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__placeList(soap, &soap_tmp_ps__placeList, "ps:placeList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->placeList(soap_tmp_ps__placeListResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__placeListResponse(soap, &soap_tmp_ps__placeListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__placeListResponse(soap, &soap_tmp_ps__placeListResponse, "ps:placeListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__placeListResponse(soap, &soap_tmp_ps__placeListResponse, "ps:placeListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__gameList(projectstatsService *soap)
{	struct ps__gameList soap_tmp_ps__gameList;
	struct ps__gameListResponse soap_tmp_ps__gameListResponse;
	soap_default_ps__gameListResponse(soap, &soap_tmp_ps__gameListResponse);
	soap_default_ps__gameList(soap, &soap_tmp_ps__gameList);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__gameList(soap, &soap_tmp_ps__gameList, "ps:gameList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->gameList(soap_tmp_ps__gameListResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__gameListResponse(soap, &soap_tmp_ps__gameListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__gameListResponse(soap, &soap_tmp_ps__gameListResponse, "ps:gameListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__gameListResponse(soap, &soap_tmp_ps__gameListResponse, "ps:gameListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__gameCurrentPlayingPlayers(projectstatsService *soap)
{	struct ps__gameCurrentPlayingPlayers soap_tmp_ps__gameCurrentPlayingPlayers;
	struct ps__gameCurrentPlayingPlayersResponse soap_tmp_ps__gameCurrentPlayingPlayersResponse;
	soap_default_ps__gameCurrentPlayingPlayersResponse(soap, &soap_tmp_ps__gameCurrentPlayingPlayersResponse);
	soap_default_ps__gameCurrentPlayingPlayers(soap, &soap_tmp_ps__gameCurrentPlayingPlayers);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__gameCurrentPlayingPlayers(soap, &soap_tmp_ps__gameCurrentPlayingPlayers, "ps:gameCurrentPlayingPlayers", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->gameCurrentPlayingPlayers(soap_tmp_ps__gameCurrentPlayingPlayers.gameId, soap_tmp_ps__gameCurrentPlayingPlayersResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__gameCurrentPlayingPlayersResponse(soap, &soap_tmp_ps__gameCurrentPlayingPlayersResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__gameCurrentPlayingPlayersResponse(soap, &soap_tmp_ps__gameCurrentPlayingPlayersResponse, "ps:gameCurrentPlayingPlayersResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__gameCurrentPlayingPlayersResponse(soap, &soap_tmp_ps__gameCurrentPlayingPlayersResponse, "ps:gameCurrentPlayingPlayersResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__addSchmeisserei(projectstatsService *soap)
{	struct ps__addSchmeisserei soap_tmp_ps__addSchmeisserei;
	struct ps__addSchmeissereiResponse soap_tmp_ps__addSchmeissereiResponse;
	soap_default_ps__addSchmeissereiResponse(soap, &soap_tmp_ps__addSchmeissereiResponse);
	soap_default_ps__addSchmeisserei(soap, &soap_tmp_ps__addSchmeisserei);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__addSchmeisserei(soap, &soap_tmp_ps__addSchmeisserei, "ps:addSchmeisserei", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->addSchmeisserei(soap_tmp_ps__addSchmeisserei.gameId, soap_tmp_ps__addSchmeisserei.playerId, soap_tmp_ps__addSchmeisserei.type, soap_tmp_ps__addSchmeissereiResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__addSchmeissereiResponse(soap, &soap_tmp_ps__addSchmeissereiResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__addSchmeissereiResponse(soap, &soap_tmp_ps__addSchmeissereiResponse, "ps:addSchmeissereiResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__addSchmeissereiResponse(soap, &soap_tmp_ps__addSchmeissereiResponse, "ps:addSchmeissereiResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__addDrink(projectstatsService *soap)
{	struct ps__addDrink soap_tmp_ps__addDrink;
	struct ps__addDrinkResponse soap_tmp_ps__addDrinkResponse;
	soap_default_ps__addDrinkResponse(soap, &soap_tmp_ps__addDrinkResponse);
	soap_default_ps__addDrink(soap, &soap_tmp_ps__addDrink);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__addDrink(soap, &soap_tmp_ps__addDrink, "ps:addDrink", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->addDrink(soap_tmp_ps__addDrink.gameId, soap_tmp_ps__addDrink.playerId, soap_tmp_ps__addDrink.drinkId, soap_tmp_ps__addDrinkResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__addDrinkResponse(soap, &soap_tmp_ps__addDrinkResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__addDrinkResponse(soap, &soap_tmp_ps__addDrinkResponse, "ps:addDrinkResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__addDrinkResponse(soap, &soap_tmp_ps__addDrinkResponse, "ps:addDrinkResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ps__addRound(projectstatsService *soap)
{	struct ps__addRound soap_tmp_ps__addRound;
	struct ps__addRoundResponse soap_tmp_ps__addRoundResponse;
	soap_default_ps__addRoundResponse(soap, &soap_tmp_ps__addRoundResponse);
	soap_default_ps__addRound(soap, &soap_tmp_ps__addRound);
	soap->encodingStyle = NULL;
	if (!soap_get_ps__addRound(soap, &soap_tmp_ps__addRound, "ps:addRound", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->addRound(soap_tmp_ps__addRound.gameId, soap_tmp_ps__addRound.re1PlayerId, soap_tmp_ps__addRound.re2PlayerId, soap_tmp_ps__addRound.hochzeitPlayerId, soap_tmp_ps__addRound.schweinereiPlayerId, soap_tmp_ps__addRound.trumpfabgabePlayerId, soap_tmp_ps__addRound.soloType, soap_tmp_ps__addRound.pflichtsolo, soap_tmp_ps__addRound.points, soap_tmp_ps__addRound.comment, soap_tmp_ps__addRoundResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ps__addRoundResponse(soap, &soap_tmp_ps__addRoundResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ps__addRoundResponse(soap, &soap_tmp_ps__addRoundResponse, "ps:addRoundResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ps__addRoundResponse(soap, &soap_tmp_ps__addRoundResponse, "ps:addRoundResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
